// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: shard.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ShardService_Start_FullMethodName    = "/shard.ShardService/Start"
	ShardService_ReStart_FullMethodName  = "/shard.ShardService/ReStart"
	ShardService_Stop_FullMethodName     = "/shard.ShardService/Stop"
	ShardService_State_FullMethodName    = "/shard.ShardService/State"
	ShardService_Logs_FullMethodName     = "/shard.ShardService/Logs"
	ShardService_Execute_FullMethodName  = "/shard.ShardService/Execute"
	ShardService_Version_FullMethodName  = "/shard.ShardService/Version"
	ShardService_Update_FullMethodName   = "/shard.ShardService/Update"
	ShardService_RollBack_FullMethodName = "/shard.ShardService/RollBack"
	ShardService_Reset_FullMethodName    = "/shard.ShardService/Reset"
	ShardService_Clear_FullMethodName    = "/shard.ShardService/Clear"
)

// ShardServiceClient is the client API for ShardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShardServiceClient interface {
	Start(ctx context.Context, in *ControlRequest, opts ...grpc.CallOption) (*Notify, error)
	ReStart(ctx context.Context, in *ControlRequest, opts ...grpc.CallOption) (*Notify, error)
	Stop(ctx context.Context, in *ControlRequest, opts ...grpc.CallOption) (*Notify, error)
	State(ctx context.Context, in *ControlRequest, opts ...grpc.CallOption) (*StateResp, error)
	Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (*LogsResponse, error)
	Execute(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*Notify, error)
	Version(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*VersionResp, error)
	Update(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Notify, error)
	RollBack(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Notify, error)
	Reset(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Notify, error)
	Clear(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Notify, error)
}

type shardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewShardServiceClient(cc grpc.ClientConnInterface) ShardServiceClient {
	return &shardServiceClient{cc}
}

func (c *shardServiceClient) Start(ctx context.Context, in *ControlRequest, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ShardService_Start_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) ReStart(ctx context.Context, in *ControlRequest, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ShardService_ReStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) Stop(ctx context.Context, in *ControlRequest, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ShardService_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) State(ctx context.Context, in *ControlRequest, opts ...grpc.CallOption) (*StateResp, error) {
	out := new(StateResp)
	err := c.cc.Invoke(ctx, ShardService_State_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) Logs(ctx context.Context, in *LogsRequest, opts ...grpc.CallOption) (*LogsResponse, error) {
	out := new(LogsResponse)
	err := c.cc.Invoke(ctx, ShardService_Logs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) Execute(ctx context.Context, in *CommandRequest, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ShardService_Execute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) Version(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*VersionResp, error) {
	out := new(VersionResp)
	err := c.cc.Invoke(ctx, ShardService_Version_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) Update(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ShardService_Update_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) RollBack(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ShardService_RollBack_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) Reset(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ShardService_Reset_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shardServiceClient) Clear(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ShardService_Clear_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShardServiceServer is the server API for ShardService service.
// All implementations must embed UnimplementedShardServiceServer
// for forward compatibility
type ShardServiceServer interface {
	Start(context.Context, *ControlRequest) (*Notify, error)
	ReStart(context.Context, *ControlRequest) (*Notify, error)
	Stop(context.Context, *ControlRequest) (*Notify, error)
	State(context.Context, *ControlRequest) (*StateResp, error)
	Logs(context.Context, *LogsRequest) (*LogsResponse, error)
	Execute(context.Context, *CommandRequest) (*Notify, error)
	Version(context.Context, *ContainerId) (*VersionResp, error)
	Update(context.Context, *ContainerId) (*Notify, error)
	RollBack(context.Context, *ContainerId) (*Notify, error)
	Reset(context.Context, *ContainerId) (*Notify, error)
	Clear(context.Context, *ContainerId) (*Notify, error)
	mustEmbedUnimplementedShardServiceServer()
}

// UnimplementedShardServiceServer must be embedded to have forward compatible implementations.
type UnimplementedShardServiceServer struct {
}

func (UnimplementedShardServiceServer) Start(context.Context, *ControlRequest) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedShardServiceServer) ReStart(context.Context, *ControlRequest) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReStart not implemented")
}
func (UnimplementedShardServiceServer) Stop(context.Context, *ControlRequest) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedShardServiceServer) State(context.Context, *ControlRequest) (*StateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method State not implemented")
}
func (UnimplementedShardServiceServer) Logs(context.Context, *LogsRequest) (*LogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Logs not implemented")
}
func (UnimplementedShardServiceServer) Execute(context.Context, *CommandRequest) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedShardServiceServer) Version(context.Context, *ContainerId) (*VersionResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Version not implemented")
}
func (UnimplementedShardServiceServer) Update(context.Context, *ContainerId) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedShardServiceServer) RollBack(context.Context, *ContainerId) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RollBack not implemented")
}
func (UnimplementedShardServiceServer) Reset(context.Context, *ContainerId) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reset not implemented")
}
func (UnimplementedShardServiceServer) Clear(context.Context, *ContainerId) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Clear not implemented")
}
func (UnimplementedShardServiceServer) mustEmbedUnimplementedShardServiceServer() {}

// UnsafeShardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShardServiceServer will
// result in compilation errors.
type UnsafeShardServiceServer interface {
	mustEmbedUnimplementedShardServiceServer()
}

func RegisterShardServiceServer(s grpc.ServiceRegistrar, srv ShardServiceServer) {
	s.RegisterService(&ShardService_ServiceDesc, srv)
}

func _ShardService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).Start(ctx, req.(*ControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_ReStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).ReStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardService_ReStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).ReStart(ctx, req.(*ControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).Stop(ctx, req.(*ControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_State_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ControlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).State(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardService_State_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).State(ctx, req.(*ControlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_Logs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).Logs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardService_Logs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).Logs(ctx, req.(*LogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommandRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardService_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).Execute(ctx, req.(*CommandRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_Version_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).Version(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardService_Version_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).Version(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardService_Update_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).Update(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_RollBack_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).RollBack(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardService_RollBack_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).RollBack(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_Reset_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).Reset(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardService_Reset_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).Reset(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ShardService_Clear_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShardServiceServer).Clear(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ShardService_Clear_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShardServiceServer).Clear(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

// ShardService_ServiceDesc is the grpc.ServiceDesc for ShardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ShardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shard.ShardService",
	HandlerType: (*ShardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _ShardService_Start_Handler,
		},
		{
			MethodName: "ReStart",
			Handler:    _ShardService_ReStart_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ShardService_Stop_Handler,
		},
		{
			MethodName: "State",
			Handler:    _ShardService_State_Handler,
		},
		{
			MethodName: "Logs",
			Handler:    _ShardService_Logs_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _ShardService_Execute_Handler,
		},
		{
			MethodName: "Version",
			Handler:    _ShardService_Version_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _ShardService_Update_Handler,
		},
		{
			MethodName: "RollBack",
			Handler:    _ShardService_RollBack_Handler,
		},
		{
			MethodName: "Reset",
			Handler:    _ShardService_Reset_Handler,
		},
		{
			MethodName: "Clear",
			Handler:    _ShardService_Clear_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shard.proto",
}
