// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: archive.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ArchiveService_Info_FullMethodName           = "/archive.ArchiveService/Info"
	ArchiveService_ListBackups_FullMethodName    = "/archive.ArchiveService/ListBackups"
	ArchiveService_CreateBackup_FullMethodName   = "/archive.ArchiveService/CreateBackup"
	ArchiveService_DeleteBackUp_FullMethodName   = "/archive.ArchiveService/DeleteBackUp"
	ArchiveService_RestoreBackUp_FullMethodName  = "/archive.ArchiveService/RestoreBackUp"
	ArchiveService_UploadBackup_FullMethodName   = "/archive.ArchiveService/UploadBackup"
	ArchiveService_DownloadBackup_FullMethodName = "/archive.ArchiveService/DownloadBackup"
)

// ArchiveServiceClient is the client API for ArchiveService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ArchiveServiceClient interface {
	Info(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*ArchiveInfo, error)
	ListBackups(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*BackUpList, error)
	CreateBackup(ctx context.Context, in *BackupOpt, opts ...grpc.CallOption) (*Notify, error)
	DeleteBackUp(ctx context.Context, in *BackupOpt, opts ...grpc.CallOption) (*Notify, error)
	RestoreBackUp(ctx context.Context, in *BackupOpt, opts ...grpc.CallOption) (*Notify, error)
	UploadBackup(ctx context.Context, in *BackupFile, opts ...grpc.CallOption) (*Notify, error)
	DownloadBackup(ctx context.Context, in *BackupOpt, opts ...grpc.CallOption) (*BackupFile, error)
}

type archiveServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewArchiveServiceClient(cc grpc.ClientConnInterface) ArchiveServiceClient {
	return &archiveServiceClient{cc}
}

func (c *archiveServiceClient) Info(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*ArchiveInfo, error) {
	out := new(ArchiveInfo)
	err := c.cc.Invoke(ctx, ArchiveService_Info_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveServiceClient) ListBackups(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*BackUpList, error) {
	out := new(BackUpList)
	err := c.cc.Invoke(ctx, ArchiveService_ListBackups_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveServiceClient) CreateBackup(ctx context.Context, in *BackupOpt, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ArchiveService_CreateBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveServiceClient) DeleteBackUp(ctx context.Context, in *BackupOpt, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ArchiveService_DeleteBackUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveServiceClient) RestoreBackUp(ctx context.Context, in *BackupOpt, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ArchiveService_RestoreBackUp_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveServiceClient) UploadBackup(ctx context.Context, in *BackupFile, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ArchiveService_UploadBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *archiveServiceClient) DownloadBackup(ctx context.Context, in *BackupOpt, opts ...grpc.CallOption) (*BackupFile, error) {
	out := new(BackupFile)
	err := c.cc.Invoke(ctx, ArchiveService_DownloadBackup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ArchiveServiceServer is the server API for ArchiveService service.
// All implementations must embed UnimplementedArchiveServiceServer
// for forward compatibility
type ArchiveServiceServer interface {
	Info(context.Context, *ContainerId) (*ArchiveInfo, error)
	ListBackups(context.Context, *ContainerId) (*BackUpList, error)
	CreateBackup(context.Context, *BackupOpt) (*Notify, error)
	DeleteBackUp(context.Context, *BackupOpt) (*Notify, error)
	RestoreBackUp(context.Context, *BackupOpt) (*Notify, error)
	UploadBackup(context.Context, *BackupFile) (*Notify, error)
	DownloadBackup(context.Context, *BackupOpt) (*BackupFile, error)
	mustEmbedUnimplementedArchiveServiceServer()
}

// UnimplementedArchiveServiceServer must be embedded to have forward compatible implementations.
type UnimplementedArchiveServiceServer struct {
}

func (UnimplementedArchiveServiceServer) Info(context.Context, *ContainerId) (*ArchiveInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Info not implemented")
}
func (UnimplementedArchiveServiceServer) ListBackups(context.Context, *ContainerId) (*BackUpList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBackups not implemented")
}
func (UnimplementedArchiveServiceServer) CreateBackup(context.Context, *BackupOpt) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateBackup not implemented")
}
func (UnimplementedArchiveServiceServer) DeleteBackUp(context.Context, *BackupOpt) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteBackUp not implemented")
}
func (UnimplementedArchiveServiceServer) RestoreBackUp(context.Context, *BackupOpt) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RestoreBackUp not implemented")
}
func (UnimplementedArchiveServiceServer) UploadBackup(context.Context, *BackupFile) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadBackup not implemented")
}
func (UnimplementedArchiveServiceServer) DownloadBackup(context.Context, *BackupOpt) (*BackupFile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadBackup not implemented")
}
func (UnimplementedArchiveServiceServer) mustEmbedUnimplementedArchiveServiceServer() {}

// UnsafeArchiveServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ArchiveServiceServer will
// result in compilation errors.
type UnsafeArchiveServiceServer interface {
	mustEmbedUnimplementedArchiveServiceServer()
}

func RegisterArchiveServiceServer(s grpc.ServiceRegistrar, srv ArchiveServiceServer) {
	s.RegisterService(&ArchiveService_ServiceDesc, srv)
}

func _ArchiveService_Info_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).Info(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArchiveService_Info_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).Info(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveService_ListBackups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).ListBackups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArchiveService_ListBackups_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).ListBackups(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveService_CreateBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupOpt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).CreateBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArchiveService_CreateBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).CreateBackup(ctx, req.(*BackupOpt))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveService_DeleteBackUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupOpt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).DeleteBackUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArchiveService_DeleteBackUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).DeleteBackUp(ctx, req.(*BackupOpt))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveService_RestoreBackUp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupOpt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).RestoreBackUp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArchiveService_RestoreBackUp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).RestoreBackUp(ctx, req.(*BackupOpt))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveService_UploadBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupFile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).UploadBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArchiveService_UploadBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).UploadBackup(ctx, req.(*BackupFile))
	}
	return interceptor(ctx, in, info, handler)
}

func _ArchiveService_DownloadBackup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BackupOpt)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ArchiveServiceServer).DownloadBackup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ArchiveService_DownloadBackup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ArchiveServiceServer).DownloadBackup(ctx, req.(*BackupOpt))
	}
	return interceptor(ctx, in, info, handler)
}

// ArchiveService_ServiceDesc is the grpc.ServiceDesc for ArchiveService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ArchiveService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "archive.ArchiveService",
	HandlerType: (*ArchiveServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Info",
			Handler:    _ArchiveService_Info_Handler,
		},
		{
			MethodName: "ListBackups",
			Handler:    _ArchiveService_ListBackups_Handler,
		},
		{
			MethodName: "CreateBackup",
			Handler:    _ArchiveService_CreateBackup_Handler,
		},
		{
			MethodName: "DeleteBackUp",
			Handler:    _ArchiveService_DeleteBackUp_Handler,
		},
		{
			MethodName: "RestoreBackUp",
			Handler:    _ArchiveService_RestoreBackUp_Handler,
		},
		{
			MethodName: "UploadBackup",
			Handler:    _ArchiveService_UploadBackup_Handler,
		},
		{
			MethodName: "DownloadBackup",
			Handler:    _ArchiveService_DownloadBackup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "archive.proto",
}
