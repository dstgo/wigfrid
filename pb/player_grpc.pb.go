// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: player.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PlayerService_GetPlayerStats_FullMethodName   = "/player.PlayerService/GetPlayerStats"
	PlayerService_GetPlayerChatLog_FullMethodName = "/player.PlayerService/GetPlayerChatLog"
	PlayerService_ExecutePlayer_FullMethodName    = "/player.PlayerService/ExecutePlayer"
	PlayerService_GetWhiteList_FullMethodName     = "/player.PlayerService/GetWhiteList"
	PlayerService_GetBlackList_FullMethodName     = "/player.PlayerService/GetBlackList"
	PlayerService_GetAdminList_FullMethodName     = "/player.PlayerService/GetAdminList"
	PlayerService_AddWhiteList_FullMethodName     = "/player.PlayerService/AddWhiteList"
	PlayerService_AddBlackList_FullMethodName     = "/player.PlayerService/AddBlackList"
	PlayerService_AddAdminList_FullMethodName     = "/player.PlayerService/AddAdminList"
	PlayerService_RemoveWhiteList_FullMethodName  = "/player.PlayerService/RemoveWhiteList"
	PlayerService_RemoveBlackList_FullMethodName  = "/player.PlayerService/RemoveBlackList"
	PlayerService_RemoveAdminList_FullMethodName  = "/player.PlayerService/RemoveAdminList"
)

// PlayerServiceClient is the client API for PlayerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PlayerServiceClient interface {
	GetPlayerStats(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*PlayerStatisticInfo, error)
	GetPlayerChatLog(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*PlayerChatLog, error)
	ExecutePlayer(ctx context.Context, in *ExecutePlayerReq, opts ...grpc.CallOption) (*Notify, error)
	GetWhiteList(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*PlayerListResp, error)
	GetBlackList(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*PlayerListResp, error)
	GetAdminList(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*PlayerListResp, error)
	AddWhiteList(ctx context.Context, in *PlayerListReq, opts ...grpc.CallOption) (*Notify, error)
	AddBlackList(ctx context.Context, in *PlayerListReq, opts ...grpc.CallOption) (*Notify, error)
	AddAdminList(ctx context.Context, in *PlayerListReq, opts ...grpc.CallOption) (*Notify, error)
	RemoveWhiteList(ctx context.Context, in *PlayerListReq, opts ...grpc.CallOption) (*Notify, error)
	RemoveBlackList(ctx context.Context, in *PlayerListReq, opts ...grpc.CallOption) (*Notify, error)
	RemoveAdminList(ctx context.Context, in *PlayerListReq, opts ...grpc.CallOption) (*Notify, error)
}

type playerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPlayerServiceClient(cc grpc.ClientConnInterface) PlayerServiceClient {
	return &playerServiceClient{cc}
}

func (c *playerServiceClient) GetPlayerStats(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*PlayerStatisticInfo, error) {
	out := new(PlayerStatisticInfo)
	err := c.cc.Invoke(ctx, PlayerService_GetPlayerStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) GetPlayerChatLog(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*PlayerChatLog, error) {
	out := new(PlayerChatLog)
	err := c.cc.Invoke(ctx, PlayerService_GetPlayerChatLog_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) ExecutePlayer(ctx context.Context, in *ExecutePlayerReq, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, PlayerService_ExecutePlayer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) GetWhiteList(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*PlayerListResp, error) {
	out := new(PlayerListResp)
	err := c.cc.Invoke(ctx, PlayerService_GetWhiteList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) GetBlackList(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*PlayerListResp, error) {
	out := new(PlayerListResp)
	err := c.cc.Invoke(ctx, PlayerService_GetBlackList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) GetAdminList(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*PlayerListResp, error) {
	out := new(PlayerListResp)
	err := c.cc.Invoke(ctx, PlayerService_GetAdminList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) AddWhiteList(ctx context.Context, in *PlayerListReq, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, PlayerService_AddWhiteList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) AddBlackList(ctx context.Context, in *PlayerListReq, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, PlayerService_AddBlackList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) AddAdminList(ctx context.Context, in *PlayerListReq, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, PlayerService_AddAdminList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) RemoveWhiteList(ctx context.Context, in *PlayerListReq, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, PlayerService_RemoveWhiteList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) RemoveBlackList(ctx context.Context, in *PlayerListReq, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, PlayerService_RemoveBlackList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerServiceClient) RemoveAdminList(ctx context.Context, in *PlayerListReq, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, PlayerService_RemoveAdminList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerServiceServer is the server API for PlayerService service.
// All implementations must embed UnimplementedPlayerServiceServer
// for forward compatibility
type PlayerServiceServer interface {
	GetPlayerStats(context.Context, *ContainerId) (*PlayerStatisticInfo, error)
	GetPlayerChatLog(context.Context, *ContainerId) (*PlayerChatLog, error)
	ExecutePlayer(context.Context, *ExecutePlayerReq) (*Notify, error)
	GetWhiteList(context.Context, *ContainerId) (*PlayerListResp, error)
	GetBlackList(context.Context, *ContainerId) (*PlayerListResp, error)
	GetAdminList(context.Context, *ContainerId) (*PlayerListResp, error)
	AddWhiteList(context.Context, *PlayerListReq) (*Notify, error)
	AddBlackList(context.Context, *PlayerListReq) (*Notify, error)
	AddAdminList(context.Context, *PlayerListReq) (*Notify, error)
	RemoveWhiteList(context.Context, *PlayerListReq) (*Notify, error)
	RemoveBlackList(context.Context, *PlayerListReq) (*Notify, error)
	RemoveAdminList(context.Context, *PlayerListReq) (*Notify, error)
	mustEmbedUnimplementedPlayerServiceServer()
}

// UnimplementedPlayerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPlayerServiceServer struct {
}

func (UnimplementedPlayerServiceServer) GetPlayerStats(context.Context, *ContainerId) (*PlayerStatisticInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerStats not implemented")
}
func (UnimplementedPlayerServiceServer) GetPlayerChatLog(context.Context, *ContainerId) (*PlayerChatLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlayerChatLog not implemented")
}
func (UnimplementedPlayerServiceServer) ExecutePlayer(context.Context, *ExecutePlayerReq) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExecutePlayer not implemented")
}
func (UnimplementedPlayerServiceServer) GetWhiteList(context.Context, *ContainerId) (*PlayerListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWhiteList not implemented")
}
func (UnimplementedPlayerServiceServer) GetBlackList(context.Context, *ContainerId) (*PlayerListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBlackList not implemented")
}
func (UnimplementedPlayerServiceServer) GetAdminList(context.Context, *ContainerId) (*PlayerListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAdminList not implemented")
}
func (UnimplementedPlayerServiceServer) AddWhiteList(context.Context, *PlayerListReq) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddWhiteList not implemented")
}
func (UnimplementedPlayerServiceServer) AddBlackList(context.Context, *PlayerListReq) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBlackList not implemented")
}
func (UnimplementedPlayerServiceServer) AddAdminList(context.Context, *PlayerListReq) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddAdminList not implemented")
}
func (UnimplementedPlayerServiceServer) RemoveWhiteList(context.Context, *PlayerListReq) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveWhiteList not implemented")
}
func (UnimplementedPlayerServiceServer) RemoveBlackList(context.Context, *PlayerListReq) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBlackList not implemented")
}
func (UnimplementedPlayerServiceServer) RemoveAdminList(context.Context, *PlayerListReq) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAdminList not implemented")
}
func (UnimplementedPlayerServiceServer) mustEmbedUnimplementedPlayerServiceServer() {}

// UnsafePlayerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PlayerServiceServer will
// result in compilation errors.
type UnsafePlayerServiceServer interface {
	mustEmbedUnimplementedPlayerServiceServer()
}

func RegisterPlayerServiceServer(s grpc.ServiceRegistrar, srv PlayerServiceServer) {
	s.RegisterService(&PlayerService_ServiceDesc, srv)
}

func _PlayerService_GetPlayerStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).GetPlayerStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerService_GetPlayerStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).GetPlayerStats(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_GetPlayerChatLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).GetPlayerChatLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerService_GetPlayerChatLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).GetPlayerChatLog(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_ExecutePlayer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExecutePlayerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).ExecutePlayer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerService_ExecutePlayer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).ExecutePlayer(ctx, req.(*ExecutePlayerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_GetWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).GetWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerService_GetWhiteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).GetWhiteList(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_GetBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).GetBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerService_GetBlackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).GetBlackList(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_GetAdminList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).GetAdminList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerService_GetAdminList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).GetAdminList(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_AddWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).AddWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerService_AddWhiteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).AddWhiteList(ctx, req.(*PlayerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_AddBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).AddBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerService_AddBlackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).AddBlackList(ctx, req.(*PlayerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_AddAdminList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).AddAdminList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerService_AddAdminList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).AddAdminList(ctx, req.(*PlayerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_RemoveWhiteList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).RemoveWhiteList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerService_RemoveWhiteList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).RemoveWhiteList(ctx, req.(*PlayerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_RemoveBlackList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).RemoveBlackList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerService_RemoveBlackList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).RemoveBlackList(ctx, req.(*PlayerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PlayerService_RemoveAdminList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlayerListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServiceServer).RemoveAdminList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PlayerService_RemoveAdminList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServiceServer).RemoveAdminList(ctx, req.(*PlayerListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PlayerService_ServiceDesc is the grpc.ServiceDesc for PlayerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PlayerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "player.PlayerService",
	HandlerType: (*PlayerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlayerStats",
			Handler:    _PlayerService_GetPlayerStats_Handler,
		},
		{
			MethodName: "GetPlayerChatLog",
			Handler:    _PlayerService_GetPlayerChatLog_Handler,
		},
		{
			MethodName: "ExecutePlayer",
			Handler:    _PlayerService_ExecutePlayer_Handler,
		},
		{
			MethodName: "GetWhiteList",
			Handler:    _PlayerService_GetWhiteList_Handler,
		},
		{
			MethodName: "GetBlackList",
			Handler:    _PlayerService_GetBlackList_Handler,
		},
		{
			MethodName: "GetAdminList",
			Handler:    _PlayerService_GetAdminList_Handler,
		},
		{
			MethodName: "AddWhiteList",
			Handler:    _PlayerService_AddWhiteList_Handler,
		},
		{
			MethodName: "AddBlackList",
			Handler:    _PlayerService_AddBlackList_Handler,
		},
		{
			MethodName: "AddAdminList",
			Handler:    _PlayerService_AddAdminList_Handler,
		},
		{
			MethodName: "RemoveWhiteList",
			Handler:    _PlayerService_RemoveWhiteList_Handler,
		},
		{
			MethodName: "RemoveBlackList",
			Handler:    _PlayerService_RemoveBlackList_Handler,
		},
		{
			MethodName: "RemoveAdminList",
			Handler:    _PlayerService_RemoveAdminList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "player.proto",
}
