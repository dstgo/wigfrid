// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: daemon.proto

package pb

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ContainerId with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ContainerId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerId with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContainerIdMultiError, or
// nil if none found.
func (m *ContainerId) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ContainerIdMultiError(errors)
	}

	return nil
}

// ContainerIdMultiError is an error wrapping multiple validation errors
// returned by ContainerId.ValidateAll() if the designated constraints aren't met.
type ContainerIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerIdMultiError) AllErrors() []error { return m }

// ContainerIdValidationError is the validation error returned by
// ContainerId.Validate if the designated constraints aren't met.
type ContainerIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerIdValidationError) ErrorName() string { return "ContainerIdValidationError" }

// Error satisfies the builtin error interface
func (e ContainerIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerIdValidationError{}

// Validate checks the field values on CpuHealth with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CpuHealth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CpuHealth with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CpuHealthMultiError, or nil
// if none found.
func (m *CpuHealth) ValidateAll() error {
	return m.validate(true)
}

func (m *CpuHealth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	// no validation rules for Usage

	if len(errors) > 0 {
		return CpuHealthMultiError(errors)
	}

	return nil
}

// CpuHealthMultiError is an error wrapping multiple validation errors returned
// by CpuHealth.ValidateAll() if the designated constraints aren't met.
type CpuHealthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CpuHealthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CpuHealthMultiError) AllErrors() []error { return m }

// CpuHealthValidationError is the validation error returned by
// CpuHealth.Validate if the designated constraints aren't met.
type CpuHealthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CpuHealthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CpuHealthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CpuHealthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CpuHealthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CpuHealthValidationError) ErrorName() string { return "CpuHealthValidationError" }

// Error satisfies the builtin error interface
func (e CpuHealthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCpuHealth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CpuHealthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CpuHealthValidationError{}

// Validate checks the field values on MemoryHealth with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MemoryHealth) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MemoryHealth with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MemoryHealthMultiError, or
// nil if none found.
func (m *MemoryHealth) ValidateAll() error {
	return m.validate(true)
}

func (m *MemoryHealth) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	// no validation rules for Used

	// no validation rules for Free

	// no validation rules for Usage

	if len(errors) > 0 {
		return MemoryHealthMultiError(errors)
	}

	return nil
}

// MemoryHealthMultiError is an error wrapping multiple validation errors
// returned by MemoryHealth.ValidateAll() if the designated constraints aren't met.
type MemoryHealthMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemoryHealthMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemoryHealthMultiError) AllErrors() []error { return m }

// MemoryHealthValidationError is the validation error returned by
// MemoryHealth.Validate if the designated constraints aren't met.
type MemoryHealthValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemoryHealthValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemoryHealthValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemoryHealthValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemoryHealthValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemoryHealthValidationError) ErrorName() string { return "MemoryHealthValidationError" }

// Error satisfies the builtin error interface
func (e MemoryHealthValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMemoryHealth.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemoryHealthValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemoryHealthValidationError{}

// Validate checks the field values on HealthInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HealthInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HealthInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HealthInfoMultiError, or
// nil if none found.
func (m *HealthInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *HealthInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCpu()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HealthInfoValidationError{
					field:  "Cpu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HealthInfoValidationError{
					field:  "Cpu",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCpu()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HealthInfoValidationError{
				field:  "Cpu",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMem()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HealthInfoValidationError{
					field:  "Mem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HealthInfoValidationError{
					field:  "Mem",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMem()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HealthInfoValidationError{
				field:  "Mem",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return HealthInfoMultiError(errors)
	}

	return nil
}

// HealthInfoMultiError is an error wrapping multiple validation errors
// returned by HealthInfo.ValidateAll() if the designated constraints aren't met.
type HealthInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HealthInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HealthInfoMultiError) AllErrors() []error { return m }

// HealthInfoValidationError is the validation error returned by
// HealthInfo.Validate if the designated constraints aren't met.
type HealthInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HealthInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HealthInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HealthInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HealthInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HealthInfoValidationError) ErrorName() string { return "HealthInfoValidationError" }

// Error satisfies the builtin error interface
func (e HealthInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHealthInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HealthInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HealthInfoValidationError{}

// Validate checks the field values on Resource with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Resource) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Resource with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ResourceMultiError, or nil
// if none found.
func (m *Resource) ValidateAll() error {
	return m.validate(true)
}

func (m *Resource) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cpu

	// no validation rules for Memory

	// no validation rules for Disk

	if len(errors) > 0 {
		return ResourceMultiError(errors)
	}

	return nil
}

// ResourceMultiError is an error wrapping multiple validation errors returned
// by Resource.ValidateAll() if the designated constraints aren't met.
type ResourceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ResourceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ResourceMultiError) AllErrors() []error { return m }

// ResourceValidationError is the validation error returned by
// Resource.Validate if the designated constraints aren't met.
type ResourceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResourceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResourceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResourceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResourceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResourceValidationError) ErrorName() string { return "ResourceValidationError" }

// Error satisfies the builtin error interface
func (e ResourceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResource.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResourceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResourceValidationError{}

// Validate checks the field values on SystemInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SystemInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SystemInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SystemInfoMultiError, or
// nil if none found.
func (m *SystemInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *SystemInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Os

	// no validation rules for OsVersion

	// no validation rules for Arch

	// no validation rules for GoVersion

	// no validation rules for BuildVersion

	if all {
		switch v := interface{}(m.GetDocker()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SystemInfoValidationError{
					field:  "Docker",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SystemInfoValidationError{
					field:  "Docker",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDocker()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SystemInfoValidationError{
				field:  "Docker",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SystemInfoValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SystemInfoValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SystemInfoValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CpuModel

	if len(errors) > 0 {
		return SystemInfoMultiError(errors)
	}

	return nil
}

// SystemInfoMultiError is an error wrapping multiple validation errors
// returned by SystemInfo.ValidateAll() if the designated constraints aren't met.
type SystemInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SystemInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SystemInfoMultiError) AllErrors() []error { return m }

// SystemInfoValidationError is the validation error returned by
// SystemInfo.Validate if the designated constraints aren't met.
type SystemInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SystemInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SystemInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SystemInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SystemInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SystemInfoValidationError) ErrorName() string { return "SystemInfoValidationError" }

// Error satisfies the builtin error interface
func (e SystemInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSystemInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SystemInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SystemInfoValidationError{}

// Validate checks the field values on DockerInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DockerInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DockerInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DockerInfoMultiError, or
// nil if none found.
func (m *DockerInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *DockerInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Containers

	// no validation rules for Running

	// no validation rules for Pause

	// no validation rules for Stopped

	// no validation rules for Images

	// no validation rules for Driver

	// no validation rules for Version

	// no validation rules for KernelVersion

	if len(errors) > 0 {
		return DockerInfoMultiError(errors)
	}

	return nil
}

// DockerInfoMultiError is an error wrapping multiple validation errors
// returned by DockerInfo.ValidateAll() if the designated constraints aren't met.
type DockerInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DockerInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DockerInfoMultiError) AllErrors() []error { return m }

// DockerInfoValidationError is the validation error returned by
// DockerInfo.Validate if the designated constraints aren't met.
type DockerInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DockerInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DockerInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DockerInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DockerInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DockerInfoValidationError) ErrorName() string { return "DockerInfoValidationError" }

// Error satisfies the builtin error interface
func (e DockerInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDockerInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DockerInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DockerInfoValidationError{}

// Validate checks the field values on ImageId with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageId) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageId with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ImageIdMultiError, or nil if none found.
func (m *ImageId) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageId) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return ImageIdMultiError(errors)
	}

	return nil
}

// ImageIdMultiError is an error wrapping multiple validation errors returned
// by ImageId.ValidateAll() if the designated constraints aren't met.
type ImageIdMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageIdMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageIdMultiError) AllErrors() []error { return m }

// ImageIdValidationError is the validation error returned by ImageId.Validate
// if the designated constraints aren't met.
type ImageIdValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageIdValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageIdValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageIdValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageIdValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageIdValidationError) ErrorName() string { return "ImageIdValidationError" }

// Error satisfies the builtin error interface
func (e ImageIdValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageId.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageIdValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageIdValidationError{}

// Validate checks the field values on ListImagesReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListImagesReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListImagesReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListImagesReqMultiError, or
// nil if none found.
func (m *ListImagesReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListImagesReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Search

	// no validation rules for Page

	// no validation rules for Size

	if len(errors) > 0 {
		return ListImagesReqMultiError(errors)
	}

	return nil
}

// ListImagesReqMultiError is an error wrapping multiple validation errors
// returned by ListImagesReq.ValidateAll() if the designated constraints
// aren't met.
type ListImagesReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListImagesReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListImagesReqMultiError) AllErrors() []error { return m }

// ListImagesReqValidationError is the validation error returned by
// ListImagesReq.Validate if the designated constraints aren't met.
type ListImagesReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListImagesReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListImagesReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListImagesReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListImagesReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListImagesReqValidationError) ErrorName() string { return "ListImagesReqValidationError" }

// Error satisfies the builtin error interface
func (e ListImagesReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListImagesReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListImagesReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListImagesReqValidationError{}

// Validate checks the field values on ImageInfo with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ImageInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ImageInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ImageInfoMultiError, or nil
// if none found.
func (m *ImageInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ImageInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ParentId

	// no validation rules for Labels

	// no validation rules for Size

	// no validation rules for Containers

	// no validation rules for CreatedAt

	if len(errors) > 0 {
		return ImageInfoMultiError(errors)
	}

	return nil
}

// ImageInfoMultiError is an error wrapping multiple validation errors returned
// by ImageInfo.ValidateAll() if the designated constraints aren't met.
type ImageInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ImageInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ImageInfoMultiError) AllErrors() []error { return m }

// ImageInfoValidationError is the validation error returned by
// ImageInfo.Validate if the designated constraints aren't met.
type ImageInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ImageInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ImageInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ImageInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ImageInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ImageInfoValidationError) ErrorName() string { return "ImageInfoValidationError" }

// Error satisfies the builtin error interface
func (e ImageInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sImageInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ImageInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ImageInfoValidationError{}

// Validate checks the field values on ListImageResult with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListImageResult) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListImageResult with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListImageResultMultiError, or nil if none found.
func (m *ListImageResult) ValidateAll() error {
	return m.validate(true)
}

func (m *ListImageResult) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetImages() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListImageResultValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListImageResultValidationError{
						field:  fmt.Sprintf("Images[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListImageResultValidationError{
					field:  fmt.Sprintf("Images[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListImageResultMultiError(errors)
	}

	return nil
}

// ListImageResultMultiError is an error wrapping multiple validation errors
// returned by ListImageResult.ValidateAll() if the designated constraints
// aren't met.
type ListImageResultMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListImageResultMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListImageResultMultiError) AllErrors() []error { return m }

// ListImageResultValidationError is the validation error returned by
// ListImageResult.Validate if the designated constraints aren't met.
type ListImageResultValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListImageResultValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListImageResultValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListImageResultValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListImageResultValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListImageResultValidationError) ErrorName() string { return "ListImageResultValidationError" }

// Error satisfies the builtin error interface
func (e ListImageResultValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListImageResult.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListImageResultValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListImageResultValidationError{}

// Validate checks the field values on PortBind with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PortBind) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PortBind with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PortBindMultiError, or nil
// if none found.
func (m *PortBind) ValidateAll() error {
	return m.validate(true)
}

func (m *PortBind) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Protocol

	// no validation rules for Host

	// no validation rules for Bind

	// no validation rules for Auto

	if len(errors) > 0 {
		return PortBindMultiError(errors)
	}

	return nil
}

// PortBindMultiError is an error wrapping multiple validation errors returned
// by PortBind.ValidateAll() if the designated constraints aren't met.
type PortBindMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PortBindMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PortBindMultiError) AllErrors() []error { return m }

// PortBindValidationError is the validation error returned by
// PortBind.Validate if the designated constraints aren't met.
type PortBindValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PortBindValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PortBindValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PortBindValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PortBindValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PortBindValidationError) ErrorName() string { return "PortBindValidationError" }

// Error satisfies the builtin error interface
func (e PortBindValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPortBind.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PortBindValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PortBindValidationError{}

// Validate checks the field values on Volume with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Volume) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Volume with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VolumeMultiError, or nil if none found.
func (m *Volume) ValidateAll() error {
	return m.validate(true)
}

func (m *Volume) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VType

	// no validation rules for Host

	// no validation rules for Bind

	if len(errors) > 0 {
		return VolumeMultiError(errors)
	}

	return nil
}

// VolumeMultiError is an error wrapping multiple validation errors returned by
// Volume.ValidateAll() if the designated constraints aren't met.
type VolumeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VolumeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VolumeMultiError) AllErrors() []error { return m }

// VolumeValidationError is the validation error returned by Volume.Validate if
// the designated constraints aren't met.
type VolumeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VolumeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VolumeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VolumeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VolumeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VolumeValidationError) ErrorName() string { return "VolumeValidationError" }

// Error satisfies the builtin error interface
func (e VolumeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVolume.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VolumeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VolumeValidationError{}

// Validate checks the field values on CreateContainerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateContainerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateContainerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateContainerReqMultiError, or nil if none found.
func (m *CreateContainerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContainerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateContainerReqValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateContainerReqValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateContainerReqValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetPorts() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateContainerReqValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateContainerReqValidationError{
						field:  fmt.Sprintf("Ports[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateContainerReqValidationError{
					field:  fmt.Sprintf("Ports[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetVolumes() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CreateContainerReqValidationError{
						field:  fmt.Sprintf("Volumes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CreateContainerReqValidationError{
						field:  fmt.Sprintf("Volumes[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CreateContainerReqValidationError{
					field:  fmt.Sprintf("Volumes[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CreateContainerReqMultiError(errors)
	}

	return nil
}

// CreateContainerReqMultiError is an error wrapping multiple validation errors
// returned by CreateContainerReq.ValidateAll() if the designated constraints
// aren't met.
type CreateContainerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContainerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContainerReqMultiError) AllErrors() []error { return m }

// CreateContainerReqValidationError is the validation error returned by
// CreateContainerReq.Validate if the designated constraints aren't met.
type CreateContainerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContainerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContainerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContainerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContainerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContainerReqValidationError) ErrorName() string {
	return "CreateContainerReqValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContainerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContainerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContainerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContainerReqValidationError{}

// Validate checks the field values on CreateContainerResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateContainerResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateContainerResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateContainerRespMultiError, or nil if none found.
func (m *CreateContainerResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateContainerResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for CreatedAt

	// no validation rules for ContainerId

	if len(errors) > 0 {
		return CreateContainerRespMultiError(errors)
	}

	return nil
}

// CreateContainerRespMultiError is an error wrapping multiple validation
// errors returned by CreateContainerResp.ValidateAll() if the designated
// constraints aren't met.
type CreateContainerRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateContainerRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateContainerRespMultiError) AllErrors() []error { return m }

// CreateContainerRespValidationError is the validation error returned by
// CreateContainerResp.Validate if the designated constraints aren't met.
type CreateContainerRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateContainerRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateContainerRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateContainerRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateContainerRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateContainerRespValidationError) ErrorName() string {
	return "CreateContainerRespValidationError"
}

// Error satisfies the builtin error interface
func (e CreateContainerRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateContainerResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateContainerRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateContainerRespValidationError{}

// Validate checks the field values on ContainerInfo with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ContainerInfo) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerInfo with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContainerInfoMultiError, or
// nil if none found.
func (m *ContainerInfo) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerInfo) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for State

	// no validation rules for Name

	// no validation rules for UserId

	if all {
		switch v := interface{}(m.GetResource()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ContainerInfoValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ContainerInfoValidationError{
					field:  "Resource",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetResource()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ContainerInfoValidationError{
				field:  "Resource",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for CreatedAt

	// no validation rules for ExpiredAt

	if len(errors) > 0 {
		return ContainerInfoMultiError(errors)
	}

	return nil
}

// ContainerInfoMultiError is an error wrapping multiple validation errors
// returned by ContainerInfo.ValidateAll() if the designated constraints
// aren't met.
type ContainerInfoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerInfoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerInfoMultiError) AllErrors() []error { return m }

// ContainerInfoValidationError is the validation error returned by
// ContainerInfo.Validate if the designated constraints aren't met.
type ContainerInfoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerInfoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerInfoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerInfoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerInfoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerInfoValidationError) ErrorName() string { return "ContainerInfoValidationError" }

// Error satisfies the builtin error interface
func (e ContainerInfoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerInfo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerInfoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerInfoValidationError{}

// Validate checks the field values on ListContainerReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListContainerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContainerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContainerReqMultiError, or nil if none found.
func (m *ListContainerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContainerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Search

	// no validation rules for Page

	// no validation rules for Size

	if len(errors) > 0 {
		return ListContainerReqMultiError(errors)
	}

	return nil
}

// ListContainerReqMultiError is an error wrapping multiple validation errors
// returned by ListContainerReq.ValidateAll() if the designated constraints
// aren't met.
type ListContainerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContainerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContainerReqMultiError) AllErrors() []error { return m }

// ListContainerReqValidationError is the validation error returned by
// ListContainerReq.Validate if the designated constraints aren't met.
type ListContainerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContainerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContainerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContainerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContainerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContainerReqValidationError) ErrorName() string { return "ListContainerReqValidationError" }

// Error satisfies the builtin error interface
func (e ListContainerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContainerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContainerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContainerReqValidationError{}

// Validate checks the field values on LogContainerReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *LogContainerReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LogContainerReq with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LogContainerReqMultiError, or nil if none found.
func (m *LogContainerReq) ValidateAll() error {
	return m.validate(true)
}

func (m *LogContainerReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInstanceId()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LogContainerReqValidationError{
					field:  "InstanceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LogContainerReqValidationError{
					field:  "InstanceId",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstanceId()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LogContainerReqValidationError{
				field:  "InstanceId",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Since

	// no validation rules for Until

	// no validation rules for Timestamp

	// no validation rules for Tail

	if len(errors) > 0 {
		return LogContainerReqMultiError(errors)
	}

	return nil
}

// LogContainerReqMultiError is an error wrapping multiple validation errors
// returned by LogContainerReq.ValidateAll() if the designated constraints
// aren't met.
type LogContainerReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LogContainerReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LogContainerReqMultiError) AllErrors() []error { return m }

// LogContainerReqValidationError is the validation error returned by
// LogContainerReq.Validate if the designated constraints aren't met.
type LogContainerReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LogContainerReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LogContainerReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LogContainerReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LogContainerReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LogContainerReqValidationError) ErrorName() string { return "LogContainerReqValidationError" }

// Error satisfies the builtin error interface
func (e LogContainerReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLogContainerReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LogContainerReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LogContainerReqValidationError{}

// Validate checks the field values on ListContainerResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListContainerResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListContainerResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListContainerRespMultiError, or nil if none found.
func (m *ListContainerResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListContainerResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListContainerRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListContainerRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListContainerRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListContainerRespMultiError(errors)
	}

	return nil
}

// ListContainerRespMultiError is an error wrapping multiple validation errors
// returned by ListContainerResp.ValidateAll() if the designated constraints
// aren't met.
type ListContainerRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListContainerRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListContainerRespMultiError) AllErrors() []error { return m }

// ListContainerRespValidationError is the validation error returned by
// ListContainerResp.Validate if the designated constraints aren't met.
type ListContainerRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListContainerRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListContainerRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListContainerRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListContainerRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListContainerRespValidationError) ErrorName() string {
	return "ListContainerRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListContainerRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListContainerResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListContainerRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListContainerRespValidationError{}

// Validate checks the field values on ContainerLog with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ContainerLog) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ContainerLog with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ContainerLogMultiError, or
// nil if none found.
func (m *ContainerLog) ValidateAll() error {
	return m.validate(true)
}

func (m *ContainerLog) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LogContent

	// no validation rules for Lines

	if len(errors) > 0 {
		return ContainerLogMultiError(errors)
	}

	return nil
}

// ContainerLogMultiError is an error wrapping multiple validation errors
// returned by ContainerLog.ValidateAll() if the designated constraints aren't met.
type ContainerLogMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ContainerLogMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ContainerLogMultiError) AllErrors() []error { return m }

// ContainerLogValidationError is the validation error returned by
// ContainerLog.Validate if the designated constraints aren't met.
type ContainerLogValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ContainerLogValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ContainerLogValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ContainerLogValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ContainerLogValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ContainerLogValidationError) ErrorName() string { return "ContainerLogValidationError" }

// Error satisfies the builtin error interface
func (e ContainerLogValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sContainerLog.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ContainerLogValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ContainerLogValidationError{}
