// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: cron.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CronJobService_Create_FullMethodName = "/cron.CronJobService/Create"
	CronJobService_Delete_FullMethodName = "/cron.CronJobService/Delete"
	CronJobService_List_FullMethodName   = "/cron.CronJobService/List"
)

// CronJobServiceClient is the client API for CronJobService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CronJobServiceClient interface {
	Create(ctx context.Context, in *CreateJobReq, opts ...grpc.CallOption) (*Notify, error)
	Delete(ctx context.Context, in *CreateJobReq, opts ...grpc.CallOption) (*Notify, error)
	List(ctx context.Context, in *CreateJobReq, opts ...grpc.CallOption) (*JobList, error)
}

type cronJobServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCronJobServiceClient(cc grpc.ClientConnInterface) CronJobServiceClient {
	return &cronJobServiceClient{cc}
}

func (c *cronJobServiceClient) Create(ctx context.Context, in *CreateJobReq, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, CronJobService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronJobServiceClient) Delete(ctx context.Context, in *CreateJobReq, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, CronJobService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cronJobServiceClient) List(ctx context.Context, in *CreateJobReq, opts ...grpc.CallOption) (*JobList, error) {
	out := new(JobList)
	err := c.cc.Invoke(ctx, CronJobService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CronJobServiceServer is the server API for CronJobService service.
// All implementations must embed UnimplementedCronJobServiceServer
// for forward compatibility
type CronJobServiceServer interface {
	Create(context.Context, *CreateJobReq) (*Notify, error)
	Delete(context.Context, *CreateJobReq) (*Notify, error)
	List(context.Context, *CreateJobReq) (*JobList, error)
	mustEmbedUnimplementedCronJobServiceServer()
}

// UnimplementedCronJobServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCronJobServiceServer struct {
}

func (UnimplementedCronJobServiceServer) Create(context.Context, *CreateJobReq) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCronJobServiceServer) Delete(context.Context, *CreateJobReq) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedCronJobServiceServer) List(context.Context, *CreateJobReq) (*JobList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCronJobServiceServer) mustEmbedUnimplementedCronJobServiceServer() {}

// UnsafeCronJobServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CronJobServiceServer will
// result in compilation errors.
type UnsafeCronJobServiceServer interface {
	mustEmbedUnimplementedCronJobServiceServer()
}

func RegisterCronJobServiceServer(s grpc.ServiceRegistrar, srv CronJobServiceServer) {
	s.RegisterService(&CronJobService_ServiceDesc, srv)
}

func _CronJobService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronJobServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CronJobService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronJobServiceServer).Create(ctx, req.(*CreateJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronJobService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronJobServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CronJobService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronJobServiceServer).Delete(ctx, req.(*CreateJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _CronJobService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJobReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CronJobServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CronJobService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CronJobServiceServer).List(ctx, req.(*CreateJobReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CronJobService_ServiceDesc is the grpc.ServiceDesc for CronJobService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CronJobService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cron.CronJobService",
	HandlerType: (*CronJobServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _CronJobService_Create_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _CronJobService_Delete_Handler,
		},
		{
			MethodName: "List",
			Handler:    _CronJobService_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cron.proto",
}
