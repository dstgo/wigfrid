// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: mod.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ModService_GetWorkShopModList_FullMethodName = "/mod.ModService/GetWorkShopModList"
	ModService_Subscribe_FullMethodName          = "/mod.ModService/Subscribe"
	ModService_Unsubscribe_FullMethodName        = "/mod.ModService/Unsubscribe"
	ModService_UpdateMod_FullMethodName          = "/mod.ModService/UpdateMod"
	ModService_CheckUpdate_FullMethodName        = "/mod.ModService/CheckUpdate"
	ModService_GetModSettings_FullMethodName     = "/mod.ModService/GetModSettings"
	ModService_SaveModSettings_FullMethodName    = "/mod.ModService/SaveModSettings"
	ModService_GetRawModSettings_FullMethodName  = "/mod.ModService/GetRawModSettings"
	ModService_SaveRawModSettings_FullMethodName = "/mod.ModService/SaveRawModSettings"
)

// ModServiceClient is the client API for ModService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ModServiceClient interface {
	GetWorkShopModList(ctx context.Context, in *ModListReq, opts ...grpc.CallOption) (*ModListResp, error)
	Subscribe(ctx context.Context, in *ModId, opts ...grpc.CallOption) (*Notify, error)
	Unsubscribe(ctx context.Context, in *ModId, opts ...grpc.CallOption) (*Notify, error)
	UpdateMod(ctx context.Context, in *ModId, opts ...grpc.CallOption) (*Notify, error)
	CheckUpdate(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*CheckUpdateResult, error)
	GetModSettings(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*ModSettings, error)
	SaveModSettings(ctx context.Context, in *SaveModSettingsReq, opts ...grpc.CallOption) (*Notify, error)
	GetRawModSettings(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*RawModSettings, error)
	SaveRawModSettings(ctx context.Context, in *SaveRawModSettingsReq, opts ...grpc.CallOption) (*Notify, error)
}

type modServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewModServiceClient(cc grpc.ClientConnInterface) ModServiceClient {
	return &modServiceClient{cc}
}

func (c *modServiceClient) GetWorkShopModList(ctx context.Context, in *ModListReq, opts ...grpc.CallOption) (*ModListResp, error) {
	out := new(ModListResp)
	err := c.cc.Invoke(ctx, ModService_GetWorkShopModList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modServiceClient) Subscribe(ctx context.Context, in *ModId, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ModService_Subscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modServiceClient) Unsubscribe(ctx context.Context, in *ModId, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ModService_Unsubscribe_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modServiceClient) UpdateMod(ctx context.Context, in *ModId, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ModService_UpdateMod_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modServiceClient) CheckUpdate(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*CheckUpdateResult, error) {
	out := new(CheckUpdateResult)
	err := c.cc.Invoke(ctx, ModService_CheckUpdate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modServiceClient) GetModSettings(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*ModSettings, error) {
	out := new(ModSettings)
	err := c.cc.Invoke(ctx, ModService_GetModSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modServiceClient) SaveModSettings(ctx context.Context, in *SaveModSettingsReq, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ModService_SaveModSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modServiceClient) GetRawModSettings(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*RawModSettings, error) {
	out := new(RawModSettings)
	err := c.cc.Invoke(ctx, ModService_GetRawModSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *modServiceClient) SaveRawModSettings(ctx context.Context, in *SaveRawModSettingsReq, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ModService_SaveRawModSettings_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ModServiceServer is the server API for ModService service.
// All implementations must embed UnimplementedModServiceServer
// for forward compatibility
type ModServiceServer interface {
	GetWorkShopModList(context.Context, *ModListReq) (*ModListResp, error)
	Subscribe(context.Context, *ModId) (*Notify, error)
	Unsubscribe(context.Context, *ModId) (*Notify, error)
	UpdateMod(context.Context, *ModId) (*Notify, error)
	CheckUpdate(context.Context, *ContainerId) (*CheckUpdateResult, error)
	GetModSettings(context.Context, *ContainerId) (*ModSettings, error)
	SaveModSettings(context.Context, *SaveModSettingsReq) (*Notify, error)
	GetRawModSettings(context.Context, *ContainerId) (*RawModSettings, error)
	SaveRawModSettings(context.Context, *SaveRawModSettingsReq) (*Notify, error)
	mustEmbedUnimplementedModServiceServer()
}

// UnimplementedModServiceServer must be embedded to have forward compatible implementations.
type UnimplementedModServiceServer struct {
}

func (UnimplementedModServiceServer) GetWorkShopModList(context.Context, *ModListReq) (*ModListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWorkShopModList not implemented")
}
func (UnimplementedModServiceServer) Subscribe(context.Context, *ModId) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (UnimplementedModServiceServer) Unsubscribe(context.Context, *ModId) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unsubscribe not implemented")
}
func (UnimplementedModServiceServer) UpdateMod(context.Context, *ModId) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMod not implemented")
}
func (UnimplementedModServiceServer) CheckUpdate(context.Context, *ContainerId) (*CheckUpdateResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckUpdate not implemented")
}
func (UnimplementedModServiceServer) GetModSettings(context.Context, *ContainerId) (*ModSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetModSettings not implemented")
}
func (UnimplementedModServiceServer) SaveModSettings(context.Context, *SaveModSettingsReq) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveModSettings not implemented")
}
func (UnimplementedModServiceServer) GetRawModSettings(context.Context, *ContainerId) (*RawModSettings, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRawModSettings not implemented")
}
func (UnimplementedModServiceServer) SaveRawModSettings(context.Context, *SaveRawModSettingsReq) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveRawModSettings not implemented")
}
func (UnimplementedModServiceServer) mustEmbedUnimplementedModServiceServer() {}

// UnsafeModServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ModServiceServer will
// result in compilation errors.
type UnsafeModServiceServer interface {
	mustEmbedUnimplementedModServiceServer()
}

func RegisterModServiceServer(s grpc.ServiceRegistrar, srv ModServiceServer) {
	s.RegisterService(&ModService_ServiceDesc, srv)
}

func _ModService_GetWorkShopModList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModServiceServer).GetWorkShopModList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModService_GetWorkShopModList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModServiceServer).GetWorkShopModList(ctx, req.(*ModListReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModService_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModServiceServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModService_Subscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModServiceServer).Subscribe(ctx, req.(*ModId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModService_Unsubscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModServiceServer).Unsubscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModService_Unsubscribe_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModServiceServer).Unsubscribe(ctx, req.(*ModId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModService_UpdateMod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModServiceServer).UpdateMod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModService_UpdateMod_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModServiceServer).UpdateMod(ctx, req.(*ModId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModService_CheckUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModServiceServer).CheckUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModService_CheckUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModServiceServer).CheckUpdate(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModService_GetModSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModServiceServer).GetModSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModService_GetModSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModServiceServer).GetModSettings(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModService_SaveModSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveModSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModServiceServer).SaveModSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModService_SaveModSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModServiceServer).SaveModSettings(ctx, req.(*SaveModSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModService_GetRawModSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModServiceServer).GetRawModSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModService_GetRawModSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModServiceServer).GetRawModSettings(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ModService_SaveRawModSettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveRawModSettingsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ModServiceServer).SaveRawModSettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ModService_SaveRawModSettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ModServiceServer).SaveRawModSettings(ctx, req.(*SaveRawModSettingsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ModService_ServiceDesc is the grpc.ServiceDesc for ModService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ModService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "mod.ModService",
	HandlerType: (*ModServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWorkShopModList",
			Handler:    _ModService_GetWorkShopModList_Handler,
		},
		{
			MethodName: "Subscribe",
			Handler:    _ModService_Subscribe_Handler,
		},
		{
			MethodName: "Unsubscribe",
			Handler:    _ModService_Unsubscribe_Handler,
		},
		{
			MethodName: "UpdateMod",
			Handler:    _ModService_UpdateMod_Handler,
		},
		{
			MethodName: "CheckUpdate",
			Handler:    _ModService_CheckUpdate_Handler,
		},
		{
			MethodName: "GetModSettings",
			Handler:    _ModService_GetModSettings_Handler,
		},
		{
			MethodName: "SaveModSettings",
			Handler:    _ModService_SaveModSettings_Handler,
		},
		{
			MethodName: "GetRawModSettings",
			Handler:    _ModService_GetRawModSettings_Handler,
		},
		{
			MethodName: "SaveRawModSettings",
			Handler:    _ModService_SaveRawModSettings_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mod.proto",
}
