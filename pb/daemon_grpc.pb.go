// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: daemon.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DaemonService_HostInfo_FullMethodName    = "/daemon.DaemonService/HostInfo"
	DaemonService_HealthCheck_FullMethodName = "/daemon.DaemonService/HealthCheck"
)

// DaemonServiceClient is the client API for DaemonService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DaemonServiceClient interface {
	HostInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemInfo, error)
	HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthInfo, error)
}

type daemonServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDaemonServiceClient(cc grpc.ClientConnInterface) DaemonServiceClient {
	return &daemonServiceClient{cc}
}

func (c *daemonServiceClient) HostInfo(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*SystemInfo, error) {
	out := new(SystemInfo)
	err := c.cc.Invoke(ctx, DaemonService_HostInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *daemonServiceClient) HealthCheck(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*HealthInfo, error) {
	out := new(HealthInfo)
	err := c.cc.Invoke(ctx, DaemonService_HealthCheck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DaemonServiceServer is the server API for DaemonService service.
// All implementations must embed UnimplementedDaemonServiceServer
// for forward compatibility
type DaemonServiceServer interface {
	HostInfo(context.Context, *emptypb.Empty) (*SystemInfo, error)
	HealthCheck(context.Context, *emptypb.Empty) (*HealthInfo, error)
	mustEmbedUnimplementedDaemonServiceServer()
}

// UnimplementedDaemonServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDaemonServiceServer struct {
}

func (UnimplementedDaemonServiceServer) HostInfo(context.Context, *emptypb.Empty) (*SystemInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HostInfo not implemented")
}
func (UnimplementedDaemonServiceServer) HealthCheck(context.Context, *emptypb.Empty) (*HealthInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HealthCheck not implemented")
}
func (UnimplementedDaemonServiceServer) mustEmbedUnimplementedDaemonServiceServer() {}

// UnsafeDaemonServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DaemonServiceServer will
// result in compilation errors.
type UnsafeDaemonServiceServer interface {
	mustEmbedUnimplementedDaemonServiceServer()
}

func RegisterDaemonServiceServer(s grpc.ServiceRegistrar, srv DaemonServiceServer) {
	s.RegisterService(&DaemonService_ServiceDesc, srv)
}

func _DaemonService_HostInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServiceServer).HostInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DaemonService_HostInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServiceServer).HostInfo(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _DaemonService_HealthCheck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DaemonServiceServer).HealthCheck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DaemonService_HealthCheck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DaemonServiceServer).HealthCheck(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// DaemonService_ServiceDesc is the grpc.ServiceDesc for DaemonService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DaemonService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daemon.DaemonService",
	HandlerType: (*DaemonServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "HostInfo",
			Handler:    _DaemonService_HostInfo_Handler,
		},
		{
			MethodName: "HealthCheck",
			Handler:    _DaemonService_HealthCheck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daemon.proto",
}

const (
	ImageService_List_FullMethodName   = "/daemon.ImageService/List"
	ImageService_Remove_FullMethodName = "/daemon.ImageService/Remove"
)

// ImageServiceClient is the client API for ImageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImageServiceClient interface {
	List(ctx context.Context, in *ListImagesReq, opts ...grpc.CallOption) (*ListImageResult, error)
	Remove(ctx context.Context, in *ImageId, opts ...grpc.CallOption) (*Notify, error)
}

type imageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewImageServiceClient(cc grpc.ClientConnInterface) ImageServiceClient {
	return &imageServiceClient{cc}
}

func (c *imageServiceClient) List(ctx context.Context, in *ListImagesReq, opts ...grpc.CallOption) (*ListImageResult, error) {
	out := new(ListImageResult)
	err := c.cc.Invoke(ctx, ImageService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imageServiceClient) Remove(ctx context.Context, in *ImageId, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ImageService_Remove_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ImageServiceServer is the server API for ImageService service.
// All implementations must embed UnimplementedImageServiceServer
// for forward compatibility
type ImageServiceServer interface {
	List(context.Context, *ListImagesReq) (*ListImageResult, error)
	Remove(context.Context, *ImageId) (*Notify, error)
	mustEmbedUnimplementedImageServiceServer()
}

// UnimplementedImageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedImageServiceServer struct {
}

func (UnimplementedImageServiceServer) List(context.Context, *ListImagesReq) (*ListImageResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedImageServiceServer) Remove(context.Context, *ImageId) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Remove not implemented")
}
func (UnimplementedImageServiceServer) mustEmbedUnimplementedImageServiceServer() {}

// UnsafeImageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImageServiceServer will
// result in compilation errors.
type UnsafeImageServiceServer interface {
	mustEmbedUnimplementedImageServiceServer()
}

func RegisterImageServiceServer(s grpc.ServiceRegistrar, srv ImageServiceServer) {
	s.RegisterService(&ImageService_ServiceDesc, srv)
}

func _ImageService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListImagesReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).List(ctx, req.(*ListImagesReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ImageService_Remove_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ImageId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImageServiceServer).Remove(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ImageService_Remove_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImageServiceServer).Remove(ctx, req.(*ImageId))
	}
	return interceptor(ctx, in, info, handler)
}

// ImageService_ServiceDesc is the grpc.ServiceDesc for ImageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ImageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daemon.ImageService",
	HandlerType: (*ImageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ImageService_List_Handler,
		},
		{
			MethodName: "Remove",
			Handler:    _ImageService_Remove_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daemon.proto",
}

const (
	ContainerService_List_FullMethodName        = "/daemon.ContainerService/List"
	ContainerService_Create_FullMethodName      = "/daemon.ContainerService/Create"
	ContainerService_UpdateQuota_FullMethodName = "/daemon.ContainerService/UpdateQuota"
	ContainerService_Log_FullMethodName         = "/daemon.ContainerService/Log"
	ContainerService_Stats_FullMethodName       = "/daemon.ContainerService/Stats"
	ContainerService_Start_FullMethodName       = "/daemon.ContainerService/Start"
	ContainerService_Stop_FullMethodName        = "/daemon.ContainerService/Stop"
	ContainerService_Restart_FullMethodName     = "/daemon.ContainerService/Restart"
	ContainerService_Delete_FullMethodName      = "/daemon.ContainerService/Delete"
	ContainerService_ForceDelete_FullMethodName = "/daemon.ContainerService/ForceDelete"
)

// ContainerServiceClient is the client API for ContainerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContainerServiceClient interface {
	List(ctx context.Context, in *ListContainerReq, opts ...grpc.CallOption) (*ListContainerResp, error)
	Create(ctx context.Context, in *CreateContainerReq, opts ...grpc.CallOption) (*CreateContainerResp, error)
	UpdateQuota(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*Notify, error)
	Log(ctx context.Context, in *LogContainerReq, opts ...grpc.CallOption) (*ContainerLog, error)
	Stats(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*HealthInfo, error)
	Start(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Notify, error)
	Stop(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Notify, error)
	Restart(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Notify, error)
	Delete(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Notify, error)
	ForceDelete(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Notify, error)
}

type containerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewContainerServiceClient(cc grpc.ClientConnInterface) ContainerServiceClient {
	return &containerServiceClient{cc}
}

func (c *containerServiceClient) List(ctx context.Context, in *ListContainerReq, opts ...grpc.CallOption) (*ListContainerResp, error) {
	out := new(ListContainerResp)
	err := c.cc.Invoke(ctx, ContainerService_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) Create(ctx context.Context, in *CreateContainerReq, opts ...grpc.CallOption) (*CreateContainerResp, error) {
	out := new(CreateContainerResp)
	err := c.cc.Invoke(ctx, ContainerService_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) UpdateQuota(ctx context.Context, in *Resource, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ContainerService_UpdateQuota_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) Log(ctx context.Context, in *LogContainerReq, opts ...grpc.CallOption) (*ContainerLog, error) {
	out := new(ContainerLog)
	err := c.cc.Invoke(ctx, ContainerService_Log_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) Stats(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*HealthInfo, error) {
	out := new(HealthInfo)
	err := c.cc.Invoke(ctx, ContainerService_Stats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) Start(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ContainerService_Start_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) Stop(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ContainerService_Stop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) Restart(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ContainerService_Restart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) Delete(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ContainerService_Delete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *containerServiceClient) ForceDelete(ctx context.Context, in *ContainerId, opts ...grpc.CallOption) (*Notify, error) {
	out := new(Notify)
	err := c.cc.Invoke(ctx, ContainerService_ForceDelete_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainerServiceServer is the server API for ContainerService service.
// All implementations must embed UnimplementedContainerServiceServer
// for forward compatibility
type ContainerServiceServer interface {
	List(context.Context, *ListContainerReq) (*ListContainerResp, error)
	Create(context.Context, *CreateContainerReq) (*CreateContainerResp, error)
	UpdateQuota(context.Context, *Resource) (*Notify, error)
	Log(context.Context, *LogContainerReq) (*ContainerLog, error)
	Stats(context.Context, *ContainerId) (*HealthInfo, error)
	Start(context.Context, *ContainerId) (*Notify, error)
	Stop(context.Context, *ContainerId) (*Notify, error)
	Restart(context.Context, *ContainerId) (*Notify, error)
	Delete(context.Context, *ContainerId) (*Notify, error)
	ForceDelete(context.Context, *ContainerId) (*Notify, error)
	mustEmbedUnimplementedContainerServiceServer()
}

// UnimplementedContainerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedContainerServiceServer struct {
}

func (UnimplementedContainerServiceServer) List(context.Context, *ListContainerReq) (*ListContainerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedContainerServiceServer) Create(context.Context, *CreateContainerReq) (*CreateContainerResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedContainerServiceServer) UpdateQuota(context.Context, *Resource) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuota not implemented")
}
func (UnimplementedContainerServiceServer) Log(context.Context, *LogContainerReq) (*ContainerLog, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Log not implemented")
}
func (UnimplementedContainerServiceServer) Stats(context.Context, *ContainerId) (*HealthInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stats not implemented")
}
func (UnimplementedContainerServiceServer) Start(context.Context, *ContainerId) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedContainerServiceServer) Stop(context.Context, *ContainerId) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Stop not implemented")
}
func (UnimplementedContainerServiceServer) Restart(context.Context, *ContainerId) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restart not implemented")
}
func (UnimplementedContainerServiceServer) Delete(context.Context, *ContainerId) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedContainerServiceServer) ForceDelete(context.Context, *ContainerId) (*Notify, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ForceDelete not implemented")
}
func (UnimplementedContainerServiceServer) mustEmbedUnimplementedContainerServiceServer() {}

// UnsafeContainerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContainerServiceServer will
// result in compilation errors.
type UnsafeContainerServiceServer interface {
	mustEmbedUnimplementedContainerServiceServer()
}

func RegisterContainerServiceServer(s grpc.ServiceRegistrar, srv ContainerServiceServer) {
	s.RegisterService(&ContainerService_ServiceDesc, srv)
}

func _ContainerService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListContainerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).List(ctx, req.(*ListContainerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateContainerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).Create(ctx, req.(*CreateContainerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_UpdateQuota_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Resource)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).UpdateQuota(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_UpdateQuota_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).UpdateQuota(ctx, req.(*Resource))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_Log_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogContainerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).Log(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_Log_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).Log(ctx, req.(*LogContainerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_Stats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).Stats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_Stats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).Stats(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_Start_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).Start(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_Stop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).Stop(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_Restart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).Restart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_Restart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).Restart(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_Delete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).Delete(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContainerService_ForceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContainerId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerServiceServer).ForceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ContainerService_ForceDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerServiceServer).ForceDelete(ctx, req.(*ContainerId))
	}
	return interceptor(ctx, in, info, handler)
}

// ContainerService_ServiceDesc is the grpc.ServiceDesc for ContainerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContainerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "daemon.ContainerService",
	HandlerType: (*ContainerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ContainerService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _ContainerService_Create_Handler,
		},
		{
			MethodName: "UpdateQuota",
			Handler:    _ContainerService_UpdateQuota_Handler,
		},
		{
			MethodName: "Log",
			Handler:    _ContainerService_Log_Handler,
		},
		{
			MethodName: "Stats",
			Handler:    _ContainerService_Stats_Handler,
		},
		{
			MethodName: "Start",
			Handler:    _ContainerService_Start_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ContainerService_Stop_Handler,
		},
		{
			MethodName: "Restart",
			Handler:    _ContainerService_Restart_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _ContainerService_Delete_Handler,
		},
		{
			MethodName: "ForceDelete",
			Handler:    _ContainerService_ForceDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "daemon.proto",
}
